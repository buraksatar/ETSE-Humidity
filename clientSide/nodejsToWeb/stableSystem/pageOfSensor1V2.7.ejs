<!-- views/pages/pageofSensor1.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
	<!-- load the head.ejs part -->
	<% include ../partials/head %>

	<!-- load the all scripts and css file we need  -->
	<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
	<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
	<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script> 
    <script src="https://cdn.jsdelivr.net/epoch/0.8.4/epoch.min.js"></script> 
	<link rel="stylesheet" type="text/css" href="https://github.com/epochjs/epoch/blob/master/tests/render/css/tests.css"> 
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/epoch/0.8.4/epoch.min.css"> 
	
	<!-- define the drawing size  -->
	<style>
		.test .epoch {
        	width: 450px;
            height: 320px;
		}
    </style>
</head>

<meta charset='UTF-8'> 
<meta name='viewport' content='width=device-width', initial-scale=1.0></head>

<body class="container", onload=generate_table() >
    <!-- load the header.ejs part -->
	<header>
		<% include ../partials/header %>
	</header>

	<!-- Section to select material type -->
	<form id="materialForm">    
    	<select id="materialList" name='filling' ">
			<option value="Not Selected" selected>Select The Material</option>
        	<option value="Material1">Material 1</option>
            <option value="Material2">Material 2</option>
            <option value="Material3">Material 3</option>
		   	<option value="Material4">Material 4</option>
		   	<option value="Material5">Material 5</option>
		   	<option value="Material6">Material 6</option>
		   	<option value="Material7">Material 7</option>
		   	<option value="Material8">Material 8</option>
		   	<option value="Material9">Material 9</option>
        </select>
        <br/><br/>   
   	</form>

	<!-- Section to select the date to sort the data -->
	<div class="container">
		<div class="main">
			<form action="pageofSensor1" method="post">
		
				<label hidden>Show after this date  :</label>
					<input type="hidden" name="selectedDate" id="datepicker" value=''/>
				<label >Show data related dates from  :</label>
					<input type="text" name="selectedDate" id="startDate" value=''/>
				<label >to :</label>
					<input type="text" name="selectedDate" id="finishDate" value=''/>

			</form>
		</div>
	</div>

	<!-- Section for drawing the data -->
	<div id="area" class="test">

		<!-- to play/pause the drawing graph -->
		<p align="right"><button value='dsa' id="myButton1" >Play</button></p>

		<caption>Humidity Data</caption>
    	
		<div class="epoch"></div>
	
	</div>

<script>

// Functions for sorting data by date
// Sort table by the date
function sortTableByDates() {
	// get startdate from input
    var startDate = document.getElementById("startDate").value;
	startDateObject = new Date(Date.parse(startDate.replace('-','/','g')));

	// get finishdate from input
	var finishDate = document.getElementById("finishDate").value;
	finishDateObject = new Date(Date.parse(finishDate.replace('-','/','g')));
	finishDateObject.setDate(finishDateObject.getDate() + 1);

	for(var i=0; i<tagDatas.timeData.length; i++ ){
		// local variable
		var tableDate = new Date(Date.parse(tagDatas.timeData[i].replace('-','/','g')));	
		var result = inRange(tableDate,startDateObject,finishDateObject);
	
		if (result == true){
			// makes the row visible
			bodyDatas.row[i].style= 'table-row';
		}
		if (result == false){
			// makes the row hidden
			bodyDatas.row[i].style= "display: none;";
		}
		else{
			console.log('illegal move');
		}
	}	
}

// function for ranging the dates
function inRange(d,start,end) {
    /* 
	Checks if date in d is between dates in start and end.
	Returns a boolean or NaN:
		true  : if d is between start and end (inclusive)
        false : if d is before start or after end
        NaN   : if one or more of the dates is illegal.
    NOTE: The code inside isFinite does an assignment (=).
	console.log( this.convert(end).valueOf() );
	*/   
	return (
    	isFinite(d=this.convert(d).valueOf()) &&
        isFinite(start=this.convert(start).valueOf()) &&
        isFinite(end=this.convert(end).valueOf()) ?
        start <= d && d <= end :
        NaN
    );
}

// function for converting normal dates into Unix format
 function convert(d) {
	/* 
	Converts the date in d to a date-object. The input can be:
    a date object: returned without modification
    an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.
    a number     : Interpreted as number of milliseconds since 1 Jan 1970 (a timestamp) 
    a string     : Any format supported by the javascript engine, like 
					"YYYY/MM/DD", "MM/DD/YYYY", "Jan 31 2009" etc.
					an object     : Interpreted as an object with year, month and date
					attributes.  **NOTE** month is 0-11.
	*/
    return (
    	d.constructor === Date ? d :
        d.constructor === Array ? new Date(d[0],d[1],d[2]) :
        d.constructor === Number ? new Date(d) :
        d.constructor === String ? new Date(d) :
        typeof d === "object" ? new Date(d.year,d.month,d.date) :
        NaN
    );
}

//jquery conflict protectation
var jQuery1 = $.noConflict(); 

//0-datepicker jquery function
jQuery1(document).ready( function() {

	jQuery1.datepicker.setDefaults({ dateFormat: 'yy-mm-dd' });

	jQuery1( "#startDate" ).datepicker({
		onSelect: function() {
            sortTableByDates();
        }
	});
	
	jQuery1( "#finishDate" ).datepicker({
		onSelect: function() {
            sortTableByDates();
        }
	});
});

// funtion for the calculations of Humidity
function getCalculate(a,b,c,x){
	var result1 = a * (Math.pow(x, b)) + c;
	var result2 = result1.toPrecision(5);
	return result2;
}

// declare variables to store datas
var tagDatas = {
	idData : [],
	tempData : [],
	adcData : [],
	resData : [],
	muxData : [],
	timeData : [],
	humidtyCell : [],
	strUser : [],
	chipIDnumber : [],
	humidityData : []
}

// declare variables to create dynamic table
var bodyDatas = {
    body : [],
    tbl : [],
    divTable : [],
    tblBody : [],
    row : []
}

// declare variables for drawing the graph
var drawing = {
	maxData : [],
	time : [],
	nextTime : [],
	data : [],
	interval : [],
	y : [],
	status : false
}
        	
// gathering variables from mysql database using server
<%for(var i=1;i < pageId.length; i++){ %>
  	tagDatas.idData.push(<%=pageId[i]%>-1);
	tagDatas.tempData.push(<%=pageTemp[i]%>);
	tagDatas.adcData.push(<%=pageAdc[i]%>);
	tagDatas.resData.push(<%=pageRes[i]%>);
	tagDatas.muxData.push(<%=pageMux[i]%>);
	tagDatas.chipIDnumber.push('<%= pageId %>');
	tagDatas.timeData.push('<%= pageTime[i] %>');
<% } %>


// function to create a dynamic table 
function generate_table() {
	// get the reference for the body
  	bodyDatas.body = document.getElementsByTagName("body")[0];
  		
 	// creates a <table> element and a <tbody> element
  	bodyDatas.tbl     = document.createElement("table");
	bodyDatas.divTable = document.createElement("div");
  	bodyDatas.tblBody = document.createElement("tbody");
 	bodyDatas.row = document.createElement("tr");
		
	// Create the Column Function
    function createColumn (name){
    	var TH = document.createElement("th");
        TH.align = "center";
        var th = document.createTextNode(name);
        TH.appendChild(th);
		bodyDatas.row.appendChild(TH)
    }

    // Create Columns
    createColumn('ID');
    createColumn('Temperature');
    createColumn('ADC');
    createColumn('Resistor');
    createColumn('Mux');
    createColumn('Moisture');
	createColumn('Time');
	
	// append the rows to the bodyDatas
	bodyDatas.tblBody.appendChild(bodyDatas.row)

	var e = document.getElementById("materialList");
	tagDatas.strUser.push(e.options[e.selectedIndex].value);	
		
	// function for creating Elements
  	function createElement(xData){
 		var cell = document.createElement("td");
      	var cellText = document.createTextNode(xData);
      	cell.appendChild(cellText);
		bodyDatas.row[i].appendChild(cell);
	}
	
	bodyDatas.row = [];
		  
	// creating all cells
  	for(var i=0;i < <%=pageId.length-1%> ; i++){
    	// creates a table row
		bodyDatas.row.push(document.createElement("tr")); 

		// fill the rows with datas using createElement Function	
		createElement(tagDatas.idData[i]);
		createElement(tagDatas.tempData[i]);
		createElement(tagDatas.adcData[i]);
		createElement(tagDatas.resData[i]);
		createElement(tagDatas.muxData[i]);

		// calculate the humidity by related material
		for (var j = 5; j < 6; j++) {
      		var cell = document.createElement("td");
				
			if ( tagDatas.strUser == "Material1" ){
				var preCellText = getCalculate(15.84,-0.2576,8.923,tagDatas.resData[i]);
			}
			else if ( tagDatas.strUser == "Material2" ){
				var preCellText = getCalculate(13.2,-0.2515,10.77,tagDatas.resData[i]);
			}
			else if ( tagDatas.strUser == "Material3" ){
				var preCellText = getCalculate(17.06,-0.2832,10.64,tagDatas.resData[i]);
			}
			else if ( tagDatas.strUser == "Material4" ){
				var preCellText = getCalculate(11.57,-0.2447,9.538,tagDatas.resData[i]);
			}
			else if ( tagDatas.strUser == "Material5" ){
				var preCellText = getCalculate(13.07,-0.2664,7.812,tagDatas.resData[i]);
			}
			else if ( tagDatas.strUser == "Material6" ){
				var preCellText = getCalculate(11.34,-0.2485,7.965,tagDatas.resData[i]);
			}
			else if ( tagDatas.strUser == "Material7" ){
				var preCellText = getCalculate(10.03,-0.3146,12.35,tagDatas.resData[i]);
			}
			else if ( tagDatas.strUser == "Material8" ){
				var preCellText = getCalculate(14.62,-0.2774,11.5,tagDatas.resData[i]);
			}
			else if ( tagDatas.strUser == "Material9" ){
				var preCellText = getCalculate(13.69,-0.2404,8.352,tagDatas.resData[i]);
			}
			else{
				var preCellText = 0;
			}

					
			if(preCellText == 0){
				var cellText = document.createTextNode(preCellText.toString());
				tagDatas.humidtyCell.push(cellText);
			}else{
				var cellText = document.createTextNode(preCellText.toString());
				tagDatas.humidityData.push(preCellText);
				tagDatas.humidtyCell.push(cellText);
				tagDatas.humidtyCell[i].nodeValue = preCellText;
			}
			

     		cell.appendChild(cellText);
			bodyDatas.row[i].appendChild(cell);
					
			createElement(tagDatas.timeData[i]);

    	}
				
    	// add the row to the end of the table body
    	bodyDatas.tblBody.appendChild(bodyDatas.row[i]);
	}
		
  	// put the <tbody> in the <table>
  	bodyDatas.tbl.appendChild(bodyDatas.tblBody);	
	bodyDatas.divTable.appendChild(bodyDatas.tbl);
  	// appends <table> into <body>
  	bodyDatas.body.appendChild(bodyDatas.divTable);
  	// sets the border attribute of tbl to 2;
  	bodyDatas.tbl.setAttribute("border", "2");
}

function removeGraph(){
	(function($){
		$(document).ready(function(){
			$(".epoch").remove();
			$('.test').append('<div class="epoch"></div>');
			$('#area button').text('Play');
			//drawing.status = !drawing.status;
			//document.getElementById('myButton1').innerHTML = 'Play';

			

		});
	})(jQuery1);

	tagDatas.humidityData = [];
	drawing.nextTime = [];
	clearInterval(drawing.interval);
}

// to prevent the conflict
// var jQuery2 = $.noConflict(); 
function drawGraph(maxValue, minValue){
	// variable to get insant time
	drawing.nextTime = (function() {
		var currentTime = parseInt(new Date().getTime() / 1000);
		return function() { return currentTime++; }
	})();

	// declare starter data for drawing graph 			
	drawing.data = [{ label: 'A', values: [] }];
	drawing.interval = null;
	drawing.y = tagDatas.humidityData[1];

	drawing.time = drawing.nextTime();

	drawing.data[0].values.push({time: drawing.time, y: drawing.y});

	// jquery function for drawing the graph
	(function($){
		$(document).ready(function() {
			
			$('.test:last').before('<div class="epoch"></div>');		   
			//var denemeInterval = null;
			var status = false;
			drawing.maxData = maxValue ;
			
			var chart = $('#area .epoch').epoch({
				type: 'time.line',
				data: drawing.data,
				axes: ['left', 'bottom'],
				range: [minValue, drawing.maxData]
			});
				
			var i=0;
				
			var pushPoint = function() {
				drawing.y = tagDatas.humidityData[i];

				drawing.time = drawing.nextTime();
				//time = 1370044800;
				chart.push([{ time: drawing.time, y: drawing.y}]);
				
				if (typeof drawing.y !== 'undefined' ){
					i++;
				}
				
				chart.push([{range: [0, 30]}]);
			}

			$('#area button').on('click', function(e) {
				if (status) {
					$(e.target).text('Play');
					drawing.time = drawing.nextTime();
					clearInterval(drawing.interval);
				}
				else {
					$(e.target).text('Pause');
					
					drawing.time = drawing.nextTime();
					console.log('clock ' + drawing.time);
					pushPoint();
					drawing.interval = setInterval(pushPoint, 1000);
				}
				status = !status;

			});	
		});
	})(jQuery1);    

}

function getMaxData(data){
	var max = Math.max(...data);	
	return max;
}

function getMinData(data){
	var min = Math.min(...data);	
	return min;
}

// call ajaxCall function every second
var interval2 = null;
interval2 = setInterval(ajaxCall,1000);

// the main ajax function to make connection with server side 
function ajaxCall() {
	
	jQuery1.ajax({
        url: "/getBuff",
        type: "POST",
        dataType: "json",
        data: {},
        contentType: "application/json",
        cache: false,
        timeout: 5000,
        complete: function() {
        	//called when complete
           	console.log('process complete');
        },
        success: function(data) {

			if( data.reloadPage != 0 ){
                location.reload();
            }
			// the algorithm to calculate the humidity with every change on material selection
			var e = document.getElementById("materialList");
			tagDatas.strUser.push( e.options[e.selectedIndex].value );

			if( tagDatas.strUser[tagDatas.strUser.length-1] != tagDatas.strUser[tagDatas.strUser.length-2] ){
						
				var dynamicHumidty;
				//tagDatas.humidityData = [];

				
					if ( tagDatas.strUser[tagDatas.strUser.length-1] == "Material1" ){
						removeGraph();
						
						for (var i=0; i< tagDatas.idData.length; i++){
							dynamicHumidty = getCalculate(15.84,-0.2576,8.923,tagDatas.resData[i]);
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );				
						}
						
						var maxValue = getMaxData(tagDatas.humidityData);
						var minValue = getMinData(tagDatas.humidityData);
						drawGraph( maxValue + 10, minValue - 10 );
					}	
					else if ( tagDatas.strUser[tagDatas.strUser.length-1] == "Material2" ){
						removeGraph();
						
						for (var i=0; i< tagDatas.idData.length; i++){	
							dynamicHumidty = getCalculate(13.2,-0.2515,10.77,tagDatas.resData[i]);
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );
						}
						
						var maxValue = getMaxData(tagDatas.humidityData);
						var minValue = getMinData(tagDatas.humidityData);
						drawGraph( maxValue + 10, minValue - 10 );
					}
					else if ( tagDatas.strUser[tagDatas.strUser.length-1] == "Material3" ){
						removeGraph();

						for (var i=0; i< tagDatas.idData.length; i++){
							dynamicHumidty = getCalculate(17.06,-0.2832,10.64,tagDatas.resData[i]);
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );
						}
						
						var maxValue = getMaxData(tagDatas.humidityData);
						var minValue = getMinData(tagDatas.humidityData);
						drawGraph( maxValue + 10, minValue - 10 );
						
					}
					else if ( tagDatas.strUser[tagDatas.strUser.length-1] == "Material4" ){
						removeGraph();

						for (var i=0; i< tagDatas.idData.length; i++){
							dynamicHumidty = getCalculate(11.57,-0.2447,9.538,tagDatas.resData[i]);
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );
						}

						var maxValue = getMaxData(tagDatas.humidityData);
						var minValue = getMinData(tagDatas.humidityData);
						drawGraph( maxValue + 10, minValue - 10 );
					}
					else if ( tagDatas.strUser[tagDatas.strUser.length-1] == "Material5" ){
						removeGraph();

						for (var i=0; i< tagDatas.idData.length; i++){
							dynamicHumidty = getCalculate(13.07,-0.2664,7.812,tagDatas.resData[i]);
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );
						}

						var maxValue = getMaxData(tagDatas.humidityData);
						var minValue = getMinData(tagDatas.humidityData);
						drawGraph( maxValue + 10, minValue - 10 );
					}
					else if ( tagDatas.strUser[tagDatas.strUser.length-1] == "Material6" ){
						removeGraph();

						for (var i=0; i< tagDatas.idData.length; i++){
							dynamicHumidty = getCalculate(11.34,-0.2485,7.965,tagDatas.resData[i]);
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );
						}

						var maxValue = getMaxData(tagDatas.humidityData);
						var minValue = getMinData(tagDatas.humidityData);
						drawGraph( maxValue + 10, minValue - 10 );
					}
					else if ( tagDatas.strUser[tagDatas.strUser.length-1] == "Material7" ){
						removeGraph();

						for (var i=0; i< tagDatas.idData.length; i++){
							dynamicHumidty = getCalculate(10.03,-0.3146,12.35,tagDatas.resData[i]);
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );
						}

						var maxValue = getMaxData(tagDatas.humidityData);
						var minValue = getMinData(tagDatas.humidityData);
						drawGraph( maxValue + 10, minValue - 10 );
					}
					else if ( tagDatas.strUser[tagDatas.strUser.length-1] == "Material8" ){
						removeGraph();

						for (var i=0; i< tagDatas.idData.length; i++){
							dynamicHumidty = getCalculate(14.62,-0.2774,11.5,tagDatas.resData[i]);
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );
						}

						var maxValue = getMaxData(tagDatas.humidityData);
						var minValue = getMinData(tagDatas.humidityData);
						drawGraph( maxValue + 10, minValue - 10 );
					}
					else if ( tagDatas.strUser[tagDatas.strUser.length-1] == "Material9" ){
						removeGraph();

						for (var i=0; i< tagDatas.idData.length; i++){
							dynamicHumidty = getCalculate(13.69,-0.2404,8.352,tagDatas.resData[i]);
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );
						}

						var maxValue = getMaxData(tagDatas.humidityData);
						var minValue = getMinData(tagDatas.humidityData);
						drawGraph( maxValue + 10, minValue - 10 );
					}
					else{
						for (var i=0; i< tagDatas.idData.length; i++){
							dynamicHumidty = 70;
							tagDatas.humidtyCell[i].nodeValue = dynamicHumidty;								
							tagDatas.humidityData.push( dynamicHumidty );
						}
					}
						
				//			
			}

		},
        error: function() {
            console.log('process error');
        },
	});
}

</script>

	

</body>
</html>
